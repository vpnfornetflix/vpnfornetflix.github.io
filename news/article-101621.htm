<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnfornetflix.github.io/news/article-101621.htm" />
    <meta name="theme-color" content="#c70039">
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SpringBoot 核心源码解读</title>
        <meta name="description" content="Spring boot基本使用及 stater机制原理_踩踩踩从踩的博客-CSDN博客  前面文章对于springboot得基本使用以及stater机制 以及autoconfig 做了一个解读，如何手" />
        <link rel="icon" href="/assets/website/img/clashxpro/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="VPN For Netflix 订阅链接节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnfornetflix.github.io/news/article-101621.htm" />
    <meta property="og:site_name" content="VPN For Netflix 订阅链接节点官网" />
    <meta property="og:title" content="SpringBoot 核心源码解读" />
    <meta property="og:image" content="https://vpnfornetflix.github.io/uploads/20241107-1/6f03a797bb88d3342cc6ba45fee54fd1.webp" />
        <meta property="og:release_date" content="2025-04-22T08:24:49" />
    <meta property="og:updated_time" content="2025-04-22T08:24:49" />
        <meta property="og:description" content="Spring boot基本使用及 stater机制原理_踩踩踩从踩的博客-CSDN博客  前面文章对于springboot得基本使用以及stater机制 以及autoconfig 做了一个解读，如何手" />
        
    <!-- Start Stylesheet -->
    <link href="/assets/website/css/clashxpro/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/animate.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/bootsnav.css" rel="stylesheet" />
    <link href="/assets/website/css/clashxpro/style.css" rel="stylesheet">
    <link href="/assets/website/css/clashxpro/responsive.css" rel="stylesheet" />
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    
    <!-- Google Web Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,500,600,700,800" rel="stylesheet">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot 核心源码解读">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FE8EJMMK0B"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FE8EJMMK0B');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Header -->
    <header id="home">
        <!-- Start Navigation -->
        <nav class="navbar navbar-default navbar-fixed white no-background bootsnav">
            <div class="container">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu"> <i class="fa fa-bars"></i> </button>
                    <a class="navbar-brand" href="/">
                                                <span>VPN For Netflix</span>
                                            </a>
                </div>
                <!-- End Header Navigation -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="#" data-out="#">
                                                <li><a href="/">首页</a></li>
                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                <li><a href="/news/">新闻资讯</a></li>
                                                <li><a href="/client.htm">客户端</a></li>
                                            </ul>
                </div>
                <!-- /.navbar-collapse -->
            </div>
        </nav>
        <!-- End Navigation -->
    </header>
    <!-- End Header -->
    <!-- Start Page Heading -->
    <div class="utf-page-heading shadow dark bg-fixed text-light" style="background-image: url(assets/img/banner/breadcrum.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <h1>SpringBoot 核心源码解读</h1>
                    <div class="utf-breadcrumb-items">
                        <ul class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li class="active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Page Heading -->
    <!-- Start Portfolio -->
    <div id="portfolio" class="utf-portfolio-area-item default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail">
                      				  				  				<div id="content_views" class="htmledit_views"> <p>Spring boot基本使用及 stater机制原理_踩踩踩从踩的博客-CSDN博客</p> </h1> <p>前面文章对于springboot得基本使用以及stater机制 以及autoconfig 做了一个解读，如何手写一个starter的包，对于 自动装配 解读，有了个大概的思维；这篇文章继续讲解SpringBoot的核心源码 ，然后深入的解析整个Springboot怎么快速的构建项目 并管理我们的依赖jar包等等。</p> </h1> <h3><span style="color:#333333;"><strong>Application</strong></span><span style="color:#333333;"><strong>启动类</strong></span></h3> <div></div> <pre><code>@SpringBootApplication public class DeviceManagerApplication extends SpringBootServletInitializer {  	public static void main(String[] args) { 		SpringApplication.run(DeviceManagerApplication.class, args); 	}  	@Override 	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) { 		return builder.sources(DeviceManagerApplication.class); 	}  }</code></pre> <div>  就注解&nbsp; 以及&nbsp; run方法</div> <div></div> <div><span style="color:#333333;"><strong>认识</strong></span><span style="color:#333333;"><strong>@SpringBootApplication注解</strong></span></div> <div><span style="color:#333333;"><strong></strong></span><span style="color:#aa5500;">//</span><span style="color:#aa5500;">没有指定包名，默认是加这个注解的类所在包</span></div> <div><img fetchpriority="high" decoding="async" alt="" height="72" src="http://img.555519.xyz/uploads3/20220902/7cce4edc7bd11f4313e01756c70928c6.jpg"></div> <div></div> <p><img decoding="async" alt="" height="667" src="http://img.555519.xyz/uploads3/20220902/b2c330c207e544273d2660ca990b09c2.jpg"></p> <div><span style="color:#333333;">@SpringBootApplication</span><span style="color:#333333;">是</span><span style="color:#333333;"> @Configuration @EnableAutoConfiguration @ComponentScan</span><span style="color:#333333;">三个注 解的复合</span></div> <div>  所有的 spring.factoies&nbsp; 所有的<span style="color:#333333;">EnableAutoConfiguration</span>&nbsp; 自动配置类。</div> <div></div> <div>  组成了原始的基本信息&nbsp; 基本注解。</div> <div></div> <div> <h3><span style="color:#333333;"><strong>入口方法</strong></span><span style="color:#333333;"><strong>SpringApplication.run</strong></span></h3> <p>对于springboot 只需要运行run方法就可以将我们的程序给运行起来。</p> </div> <div></div> <div> <pre><code>/** 	 * Static helper that can be used to run a {@link SpringApplication} from the 	 * specified source using default settings. 	 * @param primarySource the primary source to load 	 * @param args the application arguments (usually passed from a Java main method) 	 * @return the running {@link ApplicationContext} 	 */ 	public static ConfigurableApplicationContext run(Class&lt;?&gt; primarySource, String... args) { 		return run(new Class&lt;?&gt;[] { primarySource }, args); 	}</code></pre> <div><span style="color:#333333;">它的返回值：ConfigurableApplicationContext</span></div> <div></div> <div>   这个<span style="color:#333333;">ConfigurableApplicationContext</span>属于总的一个&nbsp; &nbsp;总的接口，也就是说可以创建的类可以是任意一个applicationcontext.</div> <div></div> <div><img decoding="async" alt="" height="703" src="http://img.555519.xyz/uploads3/20220902/35992ecab39bcd326fc1b17ac0d4a305.jpg"></div> <div></div> </div> <div>  对于<span style="color:#333333;"><strong>SpringApplication</strong></span>&nbsp;方法上的注释</div> <div> <p>该类，该类可用于从Java main引导和启动Spring应用程序方法。默认情况下，类将执行以下步骤来引导申请：</p> <p>下面的步骤&nbsp; 核心逻辑 就是&nbsp; 创建 applicationcontext&nbsp; 实例、</p> <p>并且 注册&nbsp;CommandLinePropertySource</p> <p>激活&nbsp;CommandLineRunner&nbsp; 这个接口&nbsp;&nbsp;用于指示当bean包含在&nbsp;&nbsp;一个{@link SpringApplication}。可以定义多个{@link CommandLineRunner}bean&nbsp;&nbsp;在同一个应用程序上下文中，可以使用{@link ordered}&nbsp;接口或{@link Order@Order}注释。&nbsp; 也就是说可以&nbsp; 查看当前springapplication创建了那些bean.</p> <p><img loading="lazy" decoding="async" alt="" height="241" src="http://img.555519.xyz/uploads3/20220902/06f296177db47573b85879f6e60f147b.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="499" src="http://img.555519.xyz/uploads3/20220902/9d48835a7de85687bc8d8d0f635705d1.jpg"></p> </div> <div></div> <div><span style="color:#333333;"><strong>SpringApplication</strong></span><span style="color:#333333;"><strong>构造方法解读</strong></span></div> <div></div> <div>  通过&nbsp; 构造的方式 springApplication 可以指定初始化器&nbsp; 以及 监听器等等。 都是可以使用的。</div> <div></div> <div> <div><span style="color:#000000;">setInitializers</span></div> <div></div> <div> <div><span style="color:#000000;">primarySources</span></div> <div><span style="color:#000000;">ApplicationListener</span></div> <div></div> <div><span style="color:#000000;">等等 都是可以构造的。</span></div> <div></div> </div> </div> <div><img loading="lazy" decoding="async" alt="" height="210" src="http://img.555519.xyz/uploads3/20220902/c52741faa3e6e755fc17d5fd0fb36563.jpg"></div> <div><img loading="lazy" decoding="async" alt="" height="210" src="http://img.555519.xyz/uploads3/20220902/9c6b7fee7fb1bc2ad9a1ccdb2944de38.jpg"></div> <pre><code>/**一：注释上的重要信息： 1、primary sources：application context从primarySource加载beans  	2、创建的SpringApplication实例在调用它的run(String...)方法前，可对其进行定制化设置 可以进行哪些设置？看类中提供的public方法。 	* Create a new {@link SpringApplication} instance. The application context will load * beans from the specified primary sources (see {@link SpringApplication class- level}  	* documentation for details. The instance can be customized before calling * {@link #run(String...)}.  	* @param resourceLoader the resource loader to use  	* @param primarySources the primary bean sources  	* @see #run(Class, String[])  	* @see #setSources(Set)  	*/@SuppressWarnings({ "unchecked", "rawtypes" })  	public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) {  		//二、构造方法中的逻辑：  		this.resourceLoader = resourceLoader;  		// 1、一定要指定primarySources  		Assert.notNull(primarySources, "PrimarySources must not be null"); 		this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));  		// 2、deduce(推断)web类型(servlet、reactive、NoWeb)  		this.webApplicationType = WebApplicationType.deduceFromClasspath();  		// 3、从META-INF/spring.factories中获取 		ApplicationContextInitializer setInitializers((Collection)  		getSpringFactoriesInstances( ApplicationContextInitializer.class));  		// 4、从META-INF/spring.factories中获取 		ApplicationListener setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));  		// 5、推断执行的main方法的定义类 this.mainApplicationClass = deduceMainApplicationClass();  	}</code></pre> <p>webApplicationType&nbsp; 探测分配 是什么类型的 项目 ，其实是很简单的。 主要是判断 是否存在&nbsp; 父类</p> <p><img loading="lazy" decoding="async" alt="" height="352" src="http://img.555519.xyz/uploads3/20220902/df3944e113d87d689f6e066767d6b36e.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="383" src="http://img.555519.xyz/uploads3/20220902/a93eeafdc9cc3590f79b3d45afea6b08.jpg"></p> <p>创建获取实例， 将监听器都放进去就可以了。</p> <h3>对于<span style="color:#333333;">ApplicationContextInitializer</span></h3> <p><span style="color:#333333;">在初始化的时候会去调用</span></p> <p><img loading="lazy" decoding="async" alt="" height="345" src="http://img.555519.xyz/uploads3/20220902/e738f4930f8caee0e1838d64de365945.jpg"></p> <p>&nbsp;以及<span style="color:#333333;">ApplicationListener&nbsp; 是作为监听器存在的。</span></p> <h2><span style="color:#333333;"><strong>SpringApplication.run()</strong></span><span style="color:#333333;"><strong>实例方法解读</strong></span></h2> <div><span style="color:#333333;">相当于</span><span style="color:#333333;">ApplicationContext.refresh</span><span style="color:#333333;">一样重要</span></div> <div></div> <div></div> <div> <pre><code>/** 一：注释上的重要信息： 运行Spring application，创建并刷新一个 ApplicationContext    * Run the Spring application, creating and refreshing a new    * {@link ApplicationContext}.    * @param args the application arguments (usually passed from a Java main method)    * @return a running {@link ApplicationContext}    */   public ConfigurableApplicationContext run(String... args) {  	// 二、方法中的逻辑：    	// 1 StopWatch开启计时  	StopWatch stopWatch = new StopWatch();  	stopWatch.start();  	ConfigurableApplicationContext context = null;  Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt; ();  	// 这是设置系统属性java.awt.headless，请百度了解 java.awt.headless的用途。 	configureHeadlessProperty();  	// 2、获取到 META-INF/spring.factories中配置的SpringApplicationRunListener  	// 疑问：又出一个Listener，这个SpringApplicationRunListener是监听什么的？ 	// 通过它的接口定义、注释了解它的用途  	SpringApplicationRunListeners listeners = getRunListeners(args);  	// 这里就调用它的starting()  	listeners.starting(); 	try { 		// 命令行参数包装为了ApplicationArguments  		ApplicationArguments applicationArguments = new DefaultApplicationArguments( args);  		// 3、准备好了Environment，此刻Environment中都有哪些配置参数了？ 		ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);  		configureIgnoreBeanInfo(environment);  		// 4、打印springboot LOGo图标  		Banner printedBanner = printBanner(environment);  		// 5、创建ApplicationContext context = createApplicationContext(); 		// 6、获取到 META-INF/spring.factories中配置的SpringBootExceptionReporter  		exceptionReporters = getSpringFactoriesInstances( SpringBootExceptionReporter.class, new Class[] {  		     ConfigurableApplicationContext.class }, context);  	     // 7、准备ApplicationContext  		 prepareContext(context, environment, listeners, applicationArguments, printedBanner);  		 // 8、刷新ApplicationContext  		 refreshContext(context);  		 afterRefresh(context, applicationArguments);  		 stopWatch.stop();  		 if (this.logStartupInfo) {  		     new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch);  		}//  		9、发布started事件 listeners.started(context); 		// 10、执行所有的Runners  		callRunners(context, applicationArguments);  	}catch (Throwable ex) {  	   handleRunFailure(context, ex, exceptionReporters, listeners);  	   throw new IllegalStateException(ex);     }     try { 	// 11、发布running中事件  	listeners.running(context);       }catch (Throwable ex) {  	   handleRunFailure(context, ex, exceptionReporters, null);  	   throw new IllegalStateException(ex);  	 } 	// 12、返回ok的ConfigurableApplicationContext return context;  	}</code></pre> </div> <p>configureHeadlessProperty 方法&nbsp;该方法只做了一件事:设置了一个名为java.awt.headless的系统属性</p> <pre><code>	private void configureHeadlessProperty() { 		System.setProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, 				System.getProperty(SYSTEM_PROPERTY_JAVA_AWT_HEADLESS, Boolean.toString(this.headless))); 	}</code></pre> <p>SpringApplicationRunListeners&nbsp; 返回<span style="color:#0d0016;">的所有&nbsp;SpringApplicationRunListener&nbsp;&nbsp;监听器&nbsp; ，&nbsp; 这里面就是 监听 它失败 等等状态。</span></p> <pre><code>	private SpringApplicationRunListeners getRunListeners(String[] args) { 		Class&lt;?&gt;[] types = new Class&lt;?&gt;[] { SpringApplication.class, String[].class }; 		return new SpringApplicationRunListeners(logger, 				getSpringFactoriesInstances(SpringApplicationRunListener.class, types, this, args), 				this.applicationStartup); 	}</code></pre> <p><img loading="lazy" decoding="async" alt="" height="364" src="http://img.555519.xyz/uploads3/20220902/dd335714e4499086a950cf5005d03be2.jpg"></p> <p>&nbsp;准备参数&nbsp;DefaultApplicationArguments&nbsp; 本身需要处理</p> <p><img loading="lazy" decoding="async" alt="" height="531" src="http://img.555519.xyz/uploads3/20220902/36927311f7fabe9c609df9ea1c8cc546.jpg"></p> <h3><span style="color:#0d0016;"><strong>其中比较重要的prepareEnvironment&nbsp; &nbsp;Environment中都有哪些配置参数</strong></span></h3> <div><span style="color:#0d0016;">根据应用类型，创建对应的Environment对象，会装载环境变量、系统参数、具体应用类型配置参</span></div> <div><span style="color:#0d0016;">数</span></div> <div> <div><span style="color:#0d0016;">配置环境：加入命令行参数PropertySource,配置启用的profiles</span></div> </div> <p><span style="color:#0d0016;">&nbsp;触发RunListener环境准备完成回调</span></p> <div><span style="color:#0d0016;">将environment绑定到SpringApplication</span></div> <div></div> <div></div> <p><img loading="lazy" decoding="async" alt="" height="534" src="http://img.555519.xyz/uploads3/20220902/dd86a9f219ac7115c9dc28a0fbc862b0.jpg"></p> <p>根据类型加载 不同的参数。</p> <p><img loading="lazy" decoding="async" alt="" height="282" src="http://img.555519.xyz/uploads3/20220902/66233c60a571115988c81bdf3fa0146c.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="323" src="http://img.555519.xyz/uploads3/20220902/aee1651dc9571ece3e99f3316b4db7ee.jpg"></p> <p>&nbsp;ConfigurationPropertySources</p> <p><img loading="lazy" decoding="async" alt="" height="201" src="http://img.555519.xyz/uploads3/20220902/147bd83e7ea18f6a8a394f1171b35033.jpg"></p> <p><span style="color:#0d0016;">包括各种 的配置启用的profiles &nbsp; &nbsp;也可以指定 profiles&nbsp; &nbsp;所以可以取出来做处理。</span></p> <p><img loading="lazy" decoding="async" alt="" height="412" src="http://img.555519.xyz/uploads3/20220902/d4845d6c50d66eb836b6c10785b22fb4.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="155" src="http://img.555519.xyz/uploads3/20220902/1010107e2676e513b49dc092763c7460.jpg"></p> <p>&nbsp;环境上准备 就有的这个。 参数配置</p> <div><span style="color:#333333;">ConfigFileApplicationListener&nbsp; &nbsp;这里是所有的配置&nbsp; &nbsp;包括配置的名称 和 路径。&nbsp; 名字 以及加载</span></div> <div></div> <div></div> <div>  主要在&nbsp;starter包 中</div> <div><img loading="lazy" decoding="async" alt="" height="464" src="http://img.555519.xyz/uploads3/20220902/941cda58e382108eb94fde2ee0b7070a.jpg"></div> <h3><img loading="lazy" decoding="async" alt="" height="277" src="http://img.555519.xyz/uploads3/20220902/dcd72d15bc1330e31474754f9be488a2.jpg"></h3> <p>这里面就是&nbsp; 加载的配置参数。</p> <div><span style="color:#333333;">实现的</span><span style="color:#333333;">ApplicationListener</span><span style="color:#333333;">方法</span></div> <p><img loading="lazy" decoding="async" alt="" height="245" src="http://img.555519.xyz/uploads3/20220902/1fce9f9eb8c95d662c0d059c2a40df97.jpg"></p> <p>&nbsp;会将事件给发布出来。</p> <p><img loading="lazy" decoding="async" alt="" height="413" src="http://img.555519.xyz/uploads3/20220902/28a6a26358fe70bf5d7e1f425b32f77f.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="449" src="http://img.555519.xyz/uploads3/20220902/7c532776e0392fd4deb4ae5858cdefff.jpg"></p> <p>&nbsp;完整的加载过程。</p> <h3><strong>&nbsp;createApplicationContext</strong></h3> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="124" src="http://img.555519.xyz/uploads3/20220902/cea97cb4a97b265d40243c07b60e38b4.jpg"></p> <div><span style="color:#0d0016;">如果没有编程式指定contextClass，则根据之前推断的webApplicationType来选择对</span></div> <div><span style="color:#0d0016;">应默认的 ApplicationContext实现类</span></div> <p><img loading="lazy" decoding="async" alt="" height="466" src="http://img.555519.xyz/uploads3/20220902/3504f4d8e5e6a8297f522c884e3cb3c6.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="475" src="http://img.555519.xyz/uploads3/20220902/b25f59df90858c18bbf714ec7bf5520f.jpg"></p> <p>在新版本中是添加</p> <div><span style="color:#333333;">默认的三个常量类名 是采用的 工厂方法去创建的，但是道理是一样的。</span></div> <div><img loading="lazy" decoding="async" alt="" height="311" src="http://img.555519.xyz/uploads3/20220902/f40cbceae594e34058fc9b30ebb356ac.jpg"></div> <div><img loading="lazy" decoding="async" alt="" height="483" src="http://img.555519.xyz/uploads3/20220902/00ec66b7e02a3ebe4eb3d80cf9c388c0.jpg"></div> <h3><span style="color:#333333;"><strong>准备过程</strong></span></h3> <div><span style="color:#0d0016;">prepareContext</span></div> <div> <div><span style="color:#0d0016;">1、设置环境对象</span></div> <div> <div><span style="color:#0d0016;">2、设置ApplicationContext的beanNameGenerator、resourceLoader、</span></div> <div> <div><span style="color:#0d0016;">3、应用初始化器对ApplicationContext进行初始化处理（Initializers在构造SpringApplication时就从spring.factories中加载到了）</span></div> <div> <div><span style="color:#0d0016;">4、发布ApplicationContext准备妥当事件</span></div> <div> <div><span style="color:#0d0016;">5、打印startup日志信息</span></div> <div> <div><span style="color:#0d0016;">6 、添加例 bean 到 beanFactory中</span></div> <div></div> <div></div> <div><img loading="lazy" decoding="async" alt="" height="707" src="http://img.555519.xyz/uploads3/20220902/186fd1cb8228e102167c1d53729559cb.jpg"></div> </div> </div> </div> </div> </div> </div> <div>  对应的资源进行加载创建 解读resource&nbsp; &nbsp;懒加载load</div> <div></div> <div></div> <h3><strong>&nbsp;refreshcontext&nbsp; &nbsp;刷新</strong></h3> <p><img loading="lazy" decoding="async" alt="" height="303" src="http://img.555519.xyz/uploads3/20220902/3fa631dbf0fefd8bbaff7ad485a76bfe.jpg"></p> <p>这里最终调用 的applicationcontext. refresh方法。</p> <p><img loading="lazy" decoding="async" alt="" height="240" src="http://img.555519.xyz/uploads3/20220902/78c562bc391ca8c0eca2e78068c99439.jpg"></p> <h2><span style="color:#333333;"><strong>auto configuration</strong></span><span style="color:#333333;"><strong>的</strong></span><span style="color:#333333;"><strong>bean</strong></span><span style="color:#333333;"><strong>定义加载</strong></span></h2> <p><span style="color:#333333;"><strong>这个加载是整个 创建基础。</strong></span></p> <div><span style="color:#333333;">1. META-INF/spring.factories</span><span style="color:#333333;">中指定的</span><span style="color:#333333;">auto configuration Bean</span><span style="color:#333333;">定义在哪里完成的加载？</span></div> <div><span style="color:#333333;"></span></div> <div><span style="color:#333333;">而对于</span><span style="color:#333333;">从</span><span style="color:#333333;">META-INF/spring.factories</span><span style="color:#333333;">中加载其他的：</span></div> <pre><code>// 3、从META-INF/spring.factories中获取ApplicationContextInitializer  setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class));</code></pre> <p>这个方法 是可以加载 spring.factories</p> <p>但是对于 EnableAutoconfiguration&nbsp; 的加载 是在那里去加载的，暂时不知道。</p> <div><span style="color:#333333;">那就从这个</span><span style="color:#333333;">getSpringFactoriesInstances</span><span style="color:#333333;">（</span><span style="color:#333333;">...</span><span style="color:#333333;">）方法调用中找到一个合适的点，</span></div> <div> <div><span style="color:#333333;">看到，它是调用的SpringFactoriesLoader.loadFactoryNames(type, classLoader));&nbsp; 去加载 的 auto configuration 的&nbsp;&nbsp;spring.factories 中</span></div> <div><img loading="lazy" decoding="async" alt="" height="463" src="http://img.555519.xyz/uploads3/20220902/a195ddee9dec3c568409566f188f71a5.jpg"></div> <div><span style="color:#333333;">从调用栈看到是在进行</span><span style="color:#333333;">ConfigurationClassPostProcessor</span><span style="color:#333333;">处理阶段</span></div> <div></div> <div><img loading="lazy" decoding="async" alt="" height="267" src="http://img.555519.xyz/uploads3/20220902/487ade26fcb9192ce89bcbae30904390.jpg"></div> <div>   其实最后就是<span style="color:#333333;">AutoConfigurationImportSelector</span><span style="color:#333333;">干的这个事</span></div> <div> <pre><code>public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {}</code></pre> <div><img loading="lazy" decoding="async" alt="" height="387" src="http://img.555519.xyz/uploads3/20220902/f62cba1f3eaca0ad8f17906a192f6099.jpg"><img loading="lazy" decoding="async" alt="" height="222" src="http://img.555519.xyz/uploads3/20220902/5dea25ebb40aa6c4ab877c997e2eeffb.jpg"></div> <div><span style="color:#333333;">AutoConfigurationImportSelector</span><span style="color:#333333;">实现了</span><span style="color:#333333;"> DeferredImportSelector</span></div> <div><span style="color:#333333;">DeferredImportSelector</span><span style="color:#333333;">是延迟导入选择器。所谓延迟：在所有指定的、包扫描到的</span></div> <div></div> <div><span style="color:#333333;">@Configuration</span><span style="color:#333333;">类中的</span><span style="color:#333333;">bean</span><span style="color:#333333;">定义注册后，才会来处理延迟导入的</span><span style="color:#333333;">@Configuration</span><span style="color:#333333;">类</span></div> </div> <div></div> </div> <div><span style="color:#0d0016;">所谓延迟：在所有指定的、包扫描到的@Configuration类中的bean定义注册后，才会来处理延迟导入 的</span></div> <p><img loading="lazy" decoding="async" alt="" height="230" src="http://img.555519.xyz/uploads3/20220902/4ce87f44a498e24849f7eccd907a1436.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="288" src="http://img.555519.xyz/uploads3/20220902/b92314f895662489c594b7659d810067.jpg"></p> <div><span style="color:#333333;">让我们自己编程配置的</span><span style="color:#333333;">bean</span><span style="color:#333333;">提前注册，这样自动配置时的条件判断能发现到我们配置的，</span></div> <div><span style="color:#333333;">就能做到不再配置 自动配置的</span><span style="color:#333333;">bean</span><span style="color:#333333;">等。比如：如果我们自己配置了数据源</span><span style="color:#333333;">bean</span><span style="color:#333333;">，则使用我们配置</span></div> <div><span style="color:#333333;">的数据源，不在自动配置数据源。数 据源自动配置的代码中可以看到</span></div> <div><span style="color:#333333;">@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })</span><span style="color:#333333;">：</span></div> <h3><span style="color:#333333;"><strong>callRunners(context, applicationArguments)</strong></span></h3> <p><img loading="lazy" decoding="async" alt="" height="290" src="http://img.555519.xyz/uploads3/20220902/818fd6ebcc99b7a6aa9b79ba138eea32.jpg"></p> <div><span style="color:#333333;">在代码中我们看到，从</span><span style="color:#333333;">applicationContext</span><span style="color:#333333;">获取了所有</span><span style="color:#333333;"> ApplicationRunner</span><span style="color:#333333;">、</span><span style="color:#333333;">CommandLineRunner</span><span style="color:#333333;">类 型的bean</span><span style="color:#333333;">，并执行了它们的</span><span style="color:#333333;">run</span><span style="color:#333333;">方法。</span></div> <div><span style="color:#333333;"><strong>Tomcat</strong></span><span style="color:#333333;"><strong>是如何跑起来</strong></span></div> <div> <div><span style="color:#333333;">从创建</span><span style="color:#333333;">ApplicationContext</span><span style="color:#333333;">处开始，对于servlet的AnnotationConfigServletWebServerApplicationContext类</span></div> <div></div> <div></div> <div> <blockquote> <div><span style="color:#0d0016;">public class AnnotationConfigServletWebServerApplicationContext</span></div> <div><span style="color:#0d0016;">extends ServletWebServerApplicationContext implements AnnotationConfigRegistry {</span></div> <div><span style="color:#0d0016;">}</span></div> </blockquote> </div> <div></div> </div> <div><span style="color:#333333;">类</span><span style="color:#333333;">ServletWebServerApplicationContext</span></div> <div><span style="color:#0d0016;">这个context会通过从自身查找一个ServletWebServerFactory单例bean来创建、初始化、运行一个</span></div> <div><span style="color:#0d0016;">WebServer</span></div> <p><img loading="lazy" decoding="async" alt="" height="649" src="http://img.555519.xyz/uploads3/20220902/1e9e4f11d1ed39f4357ebc3434527521.jpg"></p> <div><span style="color:#333333;">onRefresh()</span><span style="color:#333333;">方法是</span><span style="color:#333333;">AbstractApplicationContext</span><span style="color:#333333;">中定义的供子类实现的空模板方法，在</span><span style="color:#333333;">refresh()</span><span style="color:#333333;">方法中被调用。</span></div> <div><span style="color:#333333;">TomcatServletWebServerFactory</span><span style="color:#333333;">中的实现：</span></div> <pre><code>@Override 	public WebServer getWebServer(ServletContextInitializer... initializers) { 		if (this.disableMBeanRegistry) { 			Registry.disableRegistry(); 		} 		Tomcat tomcat = new Tomcat(); 		File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir("tomcat"); 		tomcat.setBaseDir(baseDir.getAbsolutePath()); 		Connector connector = new Connector(this.protocol); 		connector.setThrowOnFailure(true); 		tomcat.getService().addConnector(connector); 		customizeConnector(connector); 		tomcat.setConnector(connector); 		tomcat.getHost().setAutoDeploy(false); 		configureEngine(tomcat.getEngine()); 		for (Connector additionalConnector : this.additionalTomcatConnectors) { 			tomcat.getService().addConnector(additionalConnector); 		} 		prepareContext(tomcat.getHost(), initializers); 		return getTomcatWebServer(tomcat); 	}</code></pre> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-100882.htm">狗粮的十大品牌是哪几个品牌（狗粮十大品牌排行榜介绍）</a></p>
                                        <p>下一个：<a href="/news/article-101622.htm">属羊可以养猫带来好运吗（属羊的人能不能养猫）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-66565.htm" title="宠物品牌起名字大全（宠物品牌介绍）">宠物品牌起名字大全（宠物品牌介绍）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-3-node-share-links.htm" title="VPN For Netflix | 4月3日19M/S|免费VPN/V2ray/Clash/Shadowrocket/SSR免费节点链接地址">VPN For Netflix | 4月3日19M/S|免费VPN/V2ray/Clash/Shadowrocket/SSR免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-92769.htm" title="宠物医院可以给仓鼠看病吗（宠物医院可以给仓鼠打疫苗吗）">宠物医院可以给仓鼠看病吗（宠物医院可以给仓鼠打疫苗吗）</a></li>
                        <li class="py-2"><a href="/news/article-79859.htm" title="Spring 源码BeanFactory使用的准备及自定义属性值解析器">Spring 源码BeanFactory使用的准备及自定义属性值解析器</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-free-high-speed-nodes.htm" title="VPN For Netflix | 3月12日18.3M/S|免费VPN/Shadowrocket/Clash/V2ray/SSR免费节点链接地址">VPN For Netflix | 3月12日18.3M/S|免费VPN/Shadowrocket/Clash/V2ray/SSR免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-82637.htm" title="在Spring配置文件中自定义标签如何实现">在Spring配置文件中自定义标签如何实现</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-6-clash-v2ray-ss-ssr.htm" title="VPN For Netflix | 3月6日21.4M/S|免费VPN/V2ray/Shadowrocket/Clash/SSR免费节点链接地址">VPN For Netflix | 3月6日21.4M/S|免费VPN/V2ray/Shadowrocket/Clash/SSR免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-81917.htm" title="动物疫苗市场销售工作布署会议（动物疫苗销售大客户经理）">动物疫苗市场销售工作布署会议（动物疫苗销售大客户经理）</a></li>
                        <li class="py-2"><a href="/news/article-91304.htm" title="asyncio 异步编程_在线工具">asyncio 异步编程_在线工具</a></li>
                        <li class="py-2"><a href="/news/article-74397.htm" title="全国排名前十的兽药厂 全国排名前十的兽药厂家有哪些">全国排名前十的兽药厂 全国排名前十的兽药厂家有哪些</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">68</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- End Portfolio -->
        <!-- Start Footer -->
    <footer class="text-center bg-dark text-light">
        <div class="container">
            <div class="row">
                <div class="col-md-8 copyright text-left">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        <a href="/">VPN For Netflix 订阅链接节点官网</a> 版权所有 Powered by WordPress
                    </p>
                </div>
                <div class="col-md-4 utf-footer-social text-right">
                    <ul>
                        <li class="facebook"><a href="#"><i class="fab fa-facebook-f"></i></a></li>
                        <li class="linkedin"><a href="#"><i class="fab fa-linkedin"></i></a></li>
                        <li class="twitter"><a href="#"><i class="fab fa-twitter"></i></a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>
    <!-- jQuery Style -->
    <script src="/assets/website/js/frontend/clashxpro/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/equal-height.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/jquery.appear.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/modernizr.custom.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/wow.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/count-to.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/bootsnav.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/typed.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/YTPlayer.min.js"></script>
    <script src="/assets/website/js/frontend/clashxpro/custom_script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>